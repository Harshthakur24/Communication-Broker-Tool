// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  name                     String
  password                 String
  avatar                   String?
  department               String?
  role                     String    @default("user")
  isActive                 Boolean   @default(true)
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLogin                DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  documents    Document[]
  chatSessions ChatSession[]
  tasks        Task[]

  @@map("users")
}

model Document {
  id         String   @id @default(cuid())
  title      String
  content    String
  type       String // pdf, docx, txt, markdown, etc.
  category   String? // policies, procedures, faq, etc.
  tags       String[] // Array of tags for better categorization
  fileUrl    String? // URL to the original file
  fileSize   Int? // File size in bytes
  uploadedBy String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User            @relation(fields: [uploadedBy], references: [id])
  chunks DocumentChunk[]

  @@index([category])
  @@index([tags])
  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  content    String
  chunkIndex Int // Order of chunk in document
  embedding  String? // Vector embedding as JSON string
  metadata   Json? // Additional metadata
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([chunkIndex])
  @@map("document_chunks")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@index([userId])
  @@map("chat_sessions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  type      String // user, assistant, system
  content   String
  sources   Json? // Array of source documents used
  metadata  Json? // Additional metadata
  createdAt DateTime @default(now())

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([createdAt])
  @@map("chat_messages")
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  status      String    @default("pending") // pending, in_progress, completed, cancelled
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  tags        String[] // Array of tags
  metadata    Json? // Additional AI-extracted metadata
  aiAnalyzed  Boolean   @default(false) // Whether AI has analyzed this task
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("tasks")
}
